# Get the Quest object
        quest = Quest.objects.get(latin_name=name)

        # Filter expenses based on Quest
        entries = STExpense.objects.filter(quests=quest).order_by("date")

        # Apply date range filter
        if start_date and end_date:
            entries = entries.filter(date__range=(start_date, end_date))

        # Get all sub-categories
        sub_categories = STExpenseSubCategory.objects.all()

        # Prepare sub-category info
        sub_category_info = {
            sub_category.latin_name: {
                "id": sub_category.id,
                "title": sub_category.name,
            }
            for sub_category in sub_categories
        }

        # Initialize aggregated data using defaultdict
        aggregated_data = defaultdict(lambda: defaultdict(int))

        # Populate aggregated_data
        for entry in entries:
            date = entry.date.strftime("%d.%m.%Y")
            sub_category = entry.sub_category.latin_name
            amount = entry.amount
            description = entry.name
            aggregated_data[date][sub_category] += amount

        # Prepare transformed data
        transformed_data = {"head": [], "body": []}
        category_ids = set()

        # Iterate through sub-categories to create category structure
        for sub_category in sub_categories:
            category_id = sub_category.category.id
            if category_id not in category_ids:
                category_data = {
                    "title": sub_category.category.name,
                    "children": [],
                }
                transformed_data["head"].append(category_data)
                category_ids.add(category_id)

            sub_category_data = {
                "title": sub_category.name,
                "dataIndex": sub_category.latin_name,
                "key": sub_category.latin_name,
            }
            category_data["children"].append(sub_category_data)

        # Populate transformed data
        id_counter = 1
        for date, sub_category_data in aggregated_data.items():
            row = {"date": date, "id": id_counter, "key": str(id_counter)}
            id_counter += 1

            # Initialize all sub-categories to 0 in the row
            for sub_category in sub_categories:
                row[sub_category.latin_name] = {
                    "sum": 0,
                    "tooltip": description,  # Set the tooltip to the name field
                }

            for sub_category, amount in sub_category_data.items():
                row[sub_category]["sum"] = amount  # Update the sum value
            row["total"] = sum(sub_category_data.values())
            transformed_data["body"].append(row)

        # Return the transformed data as a response
        return Response(transformed_data)